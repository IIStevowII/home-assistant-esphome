substitutions:
  ip_address: 192.168.178.210
  device_name: "lights-entry"
  sensor_name: "lights_entry"

  sensor_1: "lights_hallway"
  channel_1: Verlichting hal

  sensor_2: "lights_frontdoor"
  channel_2: Verlichting voordeur

  max_power: "2000.0"
  max_temp: "70.0"

esphome:
  name: ${device_name}
  platform: ESP8266
  board: esp01_1m

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: ${ip_address}
    gateway: 192.168.178.1
    subnet: 255.255.255.0

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${device_name}-ap
    password: !secret hotspot_pass

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: !secret esphome_api_password

# Enable OTA updates
ota:
  password: !secret esphome_api_password

# Enable Web server (optional).
web_server:
  port: 80

# Text sensors with general information.
text_sensor:
  - platform: version
    name: ${sensor_name}_esphome_version
  - platform: wifi_info
    ip_address:
      name: ${sensor_name}_ip_address

time:
  - platform: sntp
    id: my_time

i2c:
  sda: GPIO12
  scl: GPIO14

sensor:
  - platform: ade7953
    irq_pin: GPIO16 # Prevent overheating by setting this
    voltage:
      name: ${sensor_name}_voltage
    # On the Shelly 2.5 channels are mixed ch1=B ch2=A
    current_a:
      name: ${sensor_2}_current
      internal: true
    current_b:
      name: ${sensor_1}_current
      internal: true
    active_power_a:
      name: ${sensor_2}_power
      id: power_sensor_2
      # active_power_a is normal, so don't multiply by -1
      on_value_range:
        - above: ${max_power}
          then:
            - light.turn_off: light_2
            - homeassistant.service:
                service: persistent_notification.create
                data:
                  title: Message from ${devicename}
                data_template:
                  message: ${channel_2} turned off because power exceeded ${max_power}W
    active_power_b:
      name: ${sensor_1}_power
      id: power_sensor_1
      # active_power_b is inverted, so multiply by -1
      filters:
        - multiply: -1
      on_value_range:
        - above: ${max_power}
          then:
            - light.turn_off: light_1
            - homeassistant.service:
                service: persistent_notification.create
                data:
                  title: Message from ${devicename}
                data_template:
                  message: ${channel_1} turned off because power exceeded ${max_power}W
    update_interval: 30s

  - platform: total_daily_energy
    name: ${sensor_1}_energy
    power_id: power_sensor_1
    filters:
      # Multiplication factor from W to kWh is 0.001
      - multiply: 0.001
    unit_of_measurement: kWh

  - platform: total_daily_energy
    name: ${sensor_2}_energy
    power_id: power_sensor_2
    filters:
      # Multiplication factor from W to kWh is 0.001
      - multiply: 0.001
    unit_of_measurement: kWh

  # NTC Temperature
  - platform: ntc
    sensor: temp_resistance_reading
    name: ${sensor_name}_temperature
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    icon: "mdi:thermometer"
    calibration:
      b_constant: 3350
      reference_resistance: 10kOhm
      reference_temperature: 298.15K
    on_value_range:
      - above: ${max_temp}
        then:
          - light.turn_off: light_1
          - light.turn_off: light_2
          - homeassistant.service:
              service: persistent_notification.create
              data:
                title: Message from ${devicename}
              data_template:
                message: Switch turned off because temperature exceeded ${max_temp}°C
  - platform: resistance
    id: temp_resistance_reading
    sensor: temp_analog_reading
    configuration: DOWNSTREAM
    resistor: 32kOhm
  - platform: adc
    id: temp_analog_reading
    pin: A0

output:
  - platform: gpio
    pin: GPIO4
    id: shelly_25_relay_1
  - platform: gpio
    pin: GPIO15
    id: shelly_25_relay_2

light:
  - platform: binary
    id: light_1
    name: ${channel_1}
    output: shelly_25_relay_1
  - platform: binary
    id: light_2
    name: ${channel_2}
    output: shelly_25_relay_2

binary_sensor:
  - platform: gpio
    name: "${sensor_1}_input"
    device_class: light
    pin:
      number: GPIO13
    # small delay to prevent debouncing
    filters:
      - delayed_on_off: 50ms
    # config for state change of input button
    on_state:
        then:
          - if:
              condition:
                and:
                  - wifi.connected:
                  - api.connected:
              then:
                # Do nothing, as the state of the binary sensor is already communicated
                # We let Home Assistant decide what to do with it
              else:
                # else, toggle relay
                - light.toggle: light_1
  - platform: gpio
    name: "${sensor_2}_input"
    device_class: light
    pin:
      number: GPIO5
    # small delay to prevent debouncing
    filters:
      - delayed_on_off: 50ms
    # config for state change of input button
    on_state:
        then:
          - if:
              condition:
                and:
                  - wifi.connected:
                  - api.connected:
              then:
                # Do nothing, as the state of the binary sensor is already communicated
                # We let Home Assistant decide what to do with it
              else:
                # else, toggle relay
                - light.toggle: light_2